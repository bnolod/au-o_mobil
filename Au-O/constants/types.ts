/**
 * Az alkalmaz√°sban haszn√°lt t√≠pusokat tartalmaz√≥ f√°jl
 * @module constants/types
 * @category Constants
 */
import { GestureResponderEvent } from 'react-native';
import { HttpErrorTexts } from './texts';
import { ReactNode } from 'react';

/**
 * Kezd≈ëk√©perny≈ë elrendez√©s tulajdons√°gai
 * @interface
 */
export interface OnboardingLayoutProps {
  /**
   * A fejl√©c sz√∂vege
   * @type {React.ReactNode}
   */
  headerText: React.ReactNode;
  /**
   * F≈ëc√≠m sz√∂vege
   * @type {string}
   */
  heroText: string;
  /**
   * Call-to-action sz√∂vege
   * @type {string}
   */
  ctaText: string;
  /**
   * √Åtugorhat√≥?
   * @type {Boolean}
   */
  skippable?: Boolean;
}
/**
 * Bejelentkez√©si k√©relem
 * @interface
 */
export interface LoginRequest {
  /**
   * Felhaszn√°l√≥n√©v vagy e-mail c√≠m
   * @type {string}
   */
  usernameOrEmail: string;
  /**
   * Jelsz√≥
   * @type {string}
   */
  password: string;
}
/**
 * Bejelentkez√©si v√°lasz
 * @interface
 */
export interface LoginResponse {
  /**
   * Siker eset√©n JWT token
   */
  token?: string;
}
/**
 * Regisztr√°ci√≥s k√©relem
 * @interface
 */
export interface RegisterRequest {
  /**
   * E-mail c√≠m
   * @type {string}
   */
  email: string;
  /**
   * Jelsz√≥
   * @type {string}
   */
  password: string;
  /**
   * Felhaszn√°l√≥n√©v
   * @type {string}
   */
  username: string;
  /**
   * Becen√©v
   * @type {string}
   */
  nickname: string;
  /**
   * Sz√ºlet√©si d√°tum
   * @type {string}
   */
  dateOfBirth: string;
}
/**
 * HTTP met√≥dusok
 * @type
 */
export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE';
/**
 * HTTP hiba interf√©sz
 * @interface
 */
export interface IHttpError {
  /**
   * HTTP st√°tuszk√≥d
   * @type {number}
   */
  status: number;
  /**
   * Hiba√ºzenet
   * @type {string | undefined}
   */
  message?: string | undefined;
  /**
   * Nyelv
   * @type {'EN' | 'HU'}
   */
  language?: 'EN' | 'HU';
}
/**
 * HTTP hiba oszt√°ly
 * @class
 * @extends {IHttpError}
 */
export class HttpError implements IHttpError {
  /**
   * @param status HTTP st√°tuszk√≥d 
   * @param message HTTP hiba√ºzenet
   * @param language Nyelv
   */
  constructor(
    public status: number,
    public message?: string | undefined,
    public language: 'EN' | 'HU' = 'EN'
  ) {
    this.message = message || HttpErrorTexts[status as keyof typeof HttpErrorTexts][language];
    this.status = status;
  }
}
/**
 * Token v√°lasz
 * @interface
 */
export type TokenResponse = {
  /**
   * JWT token
   * @type {string}
   */
  token: string;
};
/**
 * Modal √°llapot
 * @interface
 */
export interface ModalState {
  /**
   * L√°that√≥?
   * @type {boolean}
   */
  visible: boolean;
  /**
   * Tartalom
   * @type {React.ReactNode | null}
   */
  content: ReactNode | null;
  /**
   * GestureResponderEvent
   * @see {GestureResponderEvent}
   * @type {GestureResponderEvent | null}
   */
  event: GestureResponderEvent | null;
}
/**
 * Reakci√≥k
 * @type
 */
export type Reactions = {
  /**
   * üî•
   * @type {number}
   */
  FIRE: number;
  /**
   * üòç
   * @type {number}
   */
  HEART: number;
  /**
   * üòé
   * @type {number}
   */
  COOL: number;
};
/**
 * √Åltal√°nos statikus elem tulajdons√°gai
 * @interface
 */
export interface CommonStaticElementProps {
  /**
   * Elem tartalma
   * @type {React.ReactNode}
   */
  children?: ReactNode;
  /**
   * Nyelv
   * @type {'EN' | 'HU'}
   */
  language: 'EN' | 'HU';
  /**
   * Sz√≠nv√°laszt√°s
   * @type {'light' | 'dark'}
   */
  colorScheme: 'light' | 'dark';
}
/**
 * Reakci√≥ √°llapot
 * @interface
 */
export type ReactionState = {
  fire: number;
  heart: number;
  sunglasses: number;
};
/**
 * Poszt k√°rtya lista elem tulajdons√°gai
 */
export interface PostCarouselElementProps {
  /**
   * K√©p URL t√∂mb 
   * @type {string[]}
   */
  images: string[];
  /**
   * Index
   * @type {number}
   */
  index: number;
}
/**
 * Poszt opci√≥ lista tulajdons√°gai
 * @interface
 */
export interface PostOptionMenuProps {
  /**
   * Poszt azonos√≠t√≥
   * @type {number}
   */
  preview: boolean;
  /**
   * Nyelv
   * @type {'EN' | 'HU'}
   */
  language: 'EN' | 'HU';
  /**
   * Poszt azonos√≠t√≥
   * @type {number}
   */
  postId: number;
  /**
   * Aktu√°lis felhaszn√°l√≥i azonos√≠t√≥
   * @type {number | null}
   */
  userId: number | null;
  /**
   * Szerz≈ë azonos√≠t√≥
   * @type {number | null}
   */
  authorId: number | null;
  /**
   * T√∂rl√©s funkci√≥
   * @callback
   * @type {() => void}
   */
  onDelete?: () => void;
}
/**
 * Aut√≥k √©rv√©nyes t√≠pusai
 */
export type CarType =
  | 'SEDAN'
  | 'COUPE'
  | 'GRANDCOUPE'
  | 'HATCH'
  | 'KOMBI'
  | 'CABRIOLET'
  | 'PICKUP'
  | 'ROADSTER'
  | 'SUV';
